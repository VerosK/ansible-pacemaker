#!/usr/bin/python
# -*- coding: utf-8 -*-

# 2016 - Gaetan trellu (goldyfruit) - <gaetan.trellu@incloudus.com>

DOCUMENTATION = '''
---
module: pcs_constraint
'''

# pcs_command_exists checks if command exists
# Example: pcs_command_exists('/usr/sbin/pcs')
def pcs_command_exists(cmd):
    try:
        os.stat(cmd)
        return True
    except:
        return False

# pcs_svc_running checks if a process is running
# Example: pcs_svc_running('[p]acemakerd')
def pcs_svc_running(svc):
    try:
        ps = subprocess.Popen(['ps', 'faux'], stdout=subprocess.PIPE)
        grep = subprocess.Popen(['grep', svc, '-c'],
                            stdin=ps.stdout,
                            stdout=subprocess.PIPE)
        ps.stdout.close()
        output = grep.communicate()[0]
        ps.wait()

        if output == '1\n':
            return True
    except:
        return False

def main():
    module = AnsibleModule(
        argument_spec  = dict(
            command    = dict(choices=['order', 'location', 'colocation', 'rule']),
            name       = dict(required=True, aliases=['id', 'constraint_id']),
            options    = dict(required=False),
            force      = dict(default='no', required=False, choices=['yes', 'no']),
            operations = dict(required=False),
            score      = dict(default='INFINITY'),
            first      = dict(require=False),
            second     = dict(require=False),
            resource   = dict(require=False),
            node       = dict(require=False, aliases=['location']),
        ),
        supports_check_mode=False,
    )


    # Check if pcs command exists.
    if pcs_command_exists('/usr/sbin/pcs') is not True:
        module.fail_json(msg="Unable to find the 'pcs' command...")

    # Check if Pacemaker is running.
    if pcs_svc_running('[p]acemakerd') is not True:
        module.fail_json(msg="pacemakerd is not running...")

    # Check if Corosync is running.
    if pcs_svc_running('[c]orosync') is not True: 
        module.fail_json(msg="corosync is not running...")

#    # Check if pcsd is running.
#    if pcs_svc_running('[p]csd start') is not True:
#        module.fail_json(msg="pcsd is not running...")

    # Validate and process command specific params.
    if module.params['command'] == 'colocation':
        rc, out, err = module.run_command('pcs constraint %(command)s show --full' % module.params)
        if out.find('(id:%(name)s)' % module.params) != -1:
            module.exit_json(changed=False,
                             msg="Colocation constraint %(name)s already exists." % module.params)

        if 'first' not in module.params:
            module.fail_json(msg="Invocation failed. Parameter 'first' should be resource id")
        if 'second' not in module.params:
            module.fail_json(msg="Invocation failed. Parameter 'second' should be resource id")
        score = module.params['score']
        if module.params['options']:
            options = module.params['options'].items()
            options = ' '.join(['%s="%s"' % (key, value) for (key, value) in options])
            module.params['options'] = options
        else:
            module.params['options'] = ''
        if score not in ['INFINITY', '+INFINITY', '-INFINITY']:
            try:
                module.params['score'] = int(score)
            except ValueError:
                module.fail_json(msg="Invocation failed. Parameter 'score' should be integer or +_INFINITY")
        changed = True
        cmd = 'pcs constraint colocation add %(first)s with %(second)s %(score)s %(options)s id="%(name)s"'

    elif module.params['command'] == 'location':
        rc, out, err = module.run_command('pcs constraint %(command)s show --full' % module.params)
        if out.find('(id:%(name)s)' % module.params) != -1:
            module.exit_json(
                changed=False,
                msg="Colocation constraint %(name)s already exists." % module.params)
        if 'resource' not in module.params:
            module.fail_json(msg="Invocation failed. Parameter 'resource' should be resource id")
        if 'node' not in module.params:
            module.fail_json(msg="Invocation failed. Parameter 'node' should be resource id")
        score = module.params['score']
        if module.params['options']:
            options = module.params['options'].items()
            options = ' '.join(['%s="%s"' % (key, value) for (key, value) in options])
            module.params['options'] = options
        else:
            module.params['options'] = ''
        if score not in ['INFINITY', '+INFINITY', '-INFINITY']:
            try:
                module.params['score'] = int(score)
            except ValueError:
                module.fail_json(msg="Invocation failed. Parameter 'score' should be integer or +_INFINITY")
        changed = True
        cmd = 'pcs constraint location add %(name)s %(resource)s %(node)s %(score)s'

    elif module.params['command'] == 'order':
        rc, out, err = module.run_command('pcs constraint %(command)s show --full' % module.params)
        if out.find('(id:%(name)s)' % module.params) != -1:
            module.exit_json(
                changed=False,
                msg="Colocation constraint %(name)s already exists." % module.params)
        if 'first' not in module.params:
            module.fail_json(msg="Invocation failed. Parameter 'first' should be resource id")
        if 'second' not in module.params:
            module.fail_json(msg="Invocation failed. Parameter 'second' should be resource id")
        score = module.params['score']
        if module.params['options']:
            options = module.params['options'].items()
            options = ' '.join(['%s="%s"' % (key, value) for (key, value) in options])
            module.params['options'] = options
        else:
            module.params['options'] = ''
        if score not in ['INFINITY', '+INFINITY', '-INFINITY']:
            try:
                module.params['score'] = int(score)
            except ValueError:
                module.fail_json(msg="Invocation failed. Parameter 'score' should be integer or +_INFINITY")
        changed = True
        cmd = 'pcs constraint order add %(name)s %(first)s %(second)s %(score)s'

    else:
        module.fail_json(msg="Not implemented command %(command)s" % module.params)
    # Run command.
    cmd = cmd % module.params
    rc, out, err = module.run_command(cmd)
    if rc is 1:
        if 'Error: duplicate constraint already exists, use --force to override' in err:
            changed=False
        else:
            module.fail_json(msg="Execution failed.\nCommand: %s\nError: %s" % (cmd, err))

    module.exit_json(changed=changed, cmd=cmd)

# import module snippets
from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()
