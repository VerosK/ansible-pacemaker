#!/usr/bin/python
# -*- coding: utf-8 -*-

# 2016 - Gaetan trellu (goldyfruit) - <gaetan.trellu@incloudus.com>

DOCUMENTATION = '''
---
module: pcs_constraint
'''

# pcs_command_exists checks if command exists
# Example: pcs_command_exists('/usr/sbin/pcs')
def pcs_command_exists(cmd):
    try:
        os.stat(cmd)
        return True
    except:
        return False

# pcs_svc_running checks if a process is running
# Example: pcs_svc_running('[p]acemakerd')
def pcs_svc_running(svc):
    try:
        ps = subprocess.Popen(['ps', 'faux'], stdout=subprocess.PIPE)
        grep = subprocess.Popen(['grep', svc, '-c'],
                            stdin=ps.stdout,
                            stdout=subprocess.PIPE)
        ps.stdout.close()
        output = grep.communicate()[0]
        ps.wait()

        if output == '1\n':
            return True
    except:
        return False

def main():
    module = AnsibleModule(
        argument_spec  = dict(
            command    = dict(choices=['order', 'location', 'colocation', 'rule']),
            name       = dict(required=True),
            options    = dict(required=False),
            force      = dict(default='no', required=False, choices=['yes', 'no']),
            operations = dict(required=False),
        ),
        supports_check_mode=True,
    )

    # Check if pcs command exists.
    if pcs_command_exists('/usr/sbin/pcs') is not True:
        module.fail_json(msg="Unable to find the 'pcs' command...")

    # Check if Pacemaker is running.
    if pcs_svc_running('[p]acemakerd') is not True:
        module.fail_json(msg="pacemakerd is not running...")

    # Check if Corosync is running.
    if pcs_svc_running('[c]orosync') is not True: 
        module.fail_json(msg="corosync is not running...")

    # Check if pcsd is running.
    if pcs_svc_running('[p]csd start') is not True:
        module.fail_json(msg="pcsd is not running...")

    # Validate and process command specific params.
    if module.params['command'] == 'order' or module.params['command'] == 'location':
        #if not module.params.has_key('options'):
        #    module.fail_json(msg="Missing required arguments: options.")
        # Command template.
        if module.params['force'] == 'yes':
            cmd = 'pcs constraint %(command)s %(name)s --force'
        else:
            cmd = 'pcs constraint %(command)s %(name)s'
        # Process operations.
        if module.params.has_key('operations'):
            cmd += ' %(operations)s'
            operations = []
            for op in module.params['operations']:
                op['options'] = ' '.join(['%s %s' % (key, value) for (key, value) in op['options'].items()])
                if module.params.has_key('action'):
                    operations.append('%(action)s %(options)s' % op)
                else:
                    operations.append('%(options)s' % op)
            module.params['operations'] = ' '.join(operations)
        changed=True

    # Run command.
    cmd = cmd % module.params
    rc, out, err = module.run_command(cmd)
    if rc is 1:
        if 'Error: duplicate constraint already exists, use --force to override' in err:
            changed=False
        else:
            module.fail_json(msg="Execution failed.\nCommand: %s\nError: %s" % (cmd, err))

    module.exit_json(changed=changed)

# import module snippets
from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()
